name: Build new aggregated documentation

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'

env:
  REGISTRY_HOST: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  REGISTRY_NAMESPACE: ${{ github.repository }}
  PLATFORM: linux/amd64,linux/arm64
  NODE_VERSION: 22.17.1
  PNPM_VERSION: 10.13.1

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Checks-out repository
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      id: pnpm-install
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU (for multi platform build)
      uses: docker/setup-qemu-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_HOST }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}
        logout: true

    - name: Build docs
      run: |
        pnpm install --frozen-lockfile
        pnpm run build:docs -T '${{ secrets.GITHUB_TOKEN }}'

    - name: Build docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        tags: ${{ env.REGISTRY_HOST }}/${{ env.REGISTRY_NAMESPACE }}:latest
        target: prod
        platforms: ${{ env.PLATFORM }}
        push: true

    - name: Clean up old images
      if: ${{ success() }}
      run: |
        ./scripts/purge-ghcr-tags.sh \
          -i "docs" \
          -g "${{ secrets.GITHUB_TOKEN }}" \
          -u "this-is-tobi"

    - name: Deploy docs
      uses: scaleway/action-scw@v0
      with:
        save-config: false
        export-config: false
        version: v2.30.0
        access-key: ${{ secrets.SCW_ACCESS_KEY }}
        secret-key: ${{ secrets.SCW_SECRET_KEY }}
        default-project-id: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
        default-organization-id: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
        args: container container deploy ${{ secrets.SCW_CONTAINER_ID }}
